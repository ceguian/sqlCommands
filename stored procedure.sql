/*Stored porcedures
	-DEBE TENER LETRAS, NUMEROS, $ Y _
    -TAMAÑO MAXIMO 64 CHAR
    -NOMBRE UNICO
    -CASE SENSITIVE
SINTAXIS:

USE DB;
DROP PROCEDURE IF EXISTS NOMBRE_SP;
DELIMITER $$
USE DB
CREATE PROCEDURE 'NOMBRE_SP' ()
BEGIN
 
END$$

DELIMITER;

'CALL' SIRVE PARA LLAMAR UN STORED PROCEDURE
*/

CALL hola_mundo;

CALL new_procedure;

CALL concatenar;

DROP PROCEDURE new_procedure;

/*VARIABLES (SINTAXIS)
DECLARE NOMBRE_VAR DATATYPE DEFAULT VALUE;

	-DATATYPE ES OBLIGATORIO, DEFAULT ES OPCIONAL.
    -DEBE TENER LETRAS Y NUMEROS
    -TAMAÑO MAXIMO 255CHAR
    -NOMBRE UNICO CASE SENSITIVE
    -SI NO TIENE DEFAULT EL VALOR ES NULL
    .DECLARACION FINALIZA CON ;
    
    
    CREATE DEFINER=`root`@`localhost` PROCEDURE `EXHIBIR_VARIABLE`()
BEGIN
DECLARE texto VARCHAR(20) DEFAULT "HOLA MUNDO";
SELECT texto AS TEXTO;
END
*/

CALL EXHIBIR_VARIABLE;

/*TIPOS DE VARIABLES 
CREATE DEFINER=`root`@`localhost` PROCEDURE `VARIABLES`()
BEGIN
DECLARE v VARCHAR(50) default "CARACTERES VARIABLES";
DECLARE i INTEGER default 154;
DECLARE d DECIMAL(5,3) default 25.325;
DECLARE f DATE default "2000-10-10";
DECLARE ts TIMESTAMP default CURRENT_TIMESTAMP();
SELECT v;
SELECT i;
SELECT d;
SELECT f;
SELECT ts;
END
*/

CALL VARIABLES;

/*IF
CREATE DEFINER=`root`@`localhost` PROCEDURE `EDAD_CLIENTES`(VDNI VARCHAR(20))
BEGIN
DECLARE VRESULTADO VARCHAR(50);
DECLARE VFECHA DATE;
SELECT FECHA_DE_NACIMIENTO FROM TABLA_DE_CLIENTES WHERE DNI = VDNI;
IF 
VFECHA < "19950101"
THEN
SET VRESULTADO = "CLIENTE VIEJO";
ELSE
SET VRESULTADO = "CLIENTE JOVEN";
END IF;
SELECT VRESULTADO;
END
*/

SELECT DNI,EDAD FROM TABLA_DE_CLIENTES;

CALL EDAD_CLIENTES(1471156710);
CALL EDAD_CLIENTES(95939180787);

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `EVALUACION_FACTURAS`(VFECHA DATE)
BEGIN
DECLARE VN_FACTURAS INTEGER;
DECLARE MENSAJE varchar(20);
SELECT COUNT(*) INTO VN_FACTURAS FROM FACTURAS WHERE FECHA_VENTA = VFECHA;
IF VN_FACTURAS > 70
THEN 
SET MENSAJE = "MUCHAS FACTURAS";
ELSE 
SET MENSAJE = "POCAS FACTURAS";
END IF;
SELECT VN_FACTURAS, MENSAJE;
END
*/

SELECT * FROM FACTURAS;

CALL EVALUACION_FACTURAS("2015-01-01");
CALL EVALUACION_FACTURAS("2020-01-01");

/*ELSEIF 
CREATE DEFINER=`root`@`localhost` PROCEDURE `PRECIO_PRODUCTO`(VCODIGO VARCHAR(20))
BEGIN
DECLARE VRESULTADO VARCHAR(40);
DECLARE VPRECIO FLOAT;
SELECT PRECIO_DE_LISTA INTO VPRECIO FROM TABLA_DE_PRODUCTOS 
WHERE CODIGO_DEL_PRODUCTO = VCODIGO;
IF VPRECIO >=12
THEN SET VRESULTADO = "PRODUCTO COSTOSO";
ELSEIF VPRECIO >=7 AND VPRECIO <12
THEN SET VRESULTADO = "PRODUCTO ASEQUIBLE";
ELSE SET VRESULTADO = "PRODUCTO BARATO";
END IF;
SELECT VRESULTADO;
END
*/

SELECT * FROM TABLA_DE_PRODUCTOS;
CALL PRECIO_PRODUCTO(1000889);
CALL PRECIO_PRODUCTO(1002334);
CALL PRECIO_PRODUCTO(1022450);

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `VARIACION`(VFECHA1 DATE, VFECHA2 DATE)
BEGIN
DECLARE SUMATORIA1 FLOAT;
DECLARE SUMATORIA2 FLOAT;
DECLARE MENSAJE VARCHAR(40);

SELECT SUM(B.CANTIDAD * B.PRECIO) INTO SUMATORIA1 FROM FACTURAS A 
INNER JOIN ITEMS_FACTURAS B
ON A.NUMERO = B.NUMERO
WHERE FECHA_VENTA = VFECHA1;
SELECT SUM(B.CANTIDAD * B.PRECIO) INTO SUMATORIA2 FROM FACTURAS A 
INNER JOIN ITEMS_FACTURAS B
ON A.NUMERO = B.NUMERO
WHERE FECHA_VENTA = VFECHA2;

IF ((SUMATORIA2- SUMATORIA1)/SUMATORIA1)*100 > 10
THEN SET MENSAJE = "VERDE";
ELSEIF ((SUMATORIA2- SUMATORIA1)/SUMATORIA1)*100 <= 10 AND ((SUMATORIA2- SUMATORIA1)/SUMATORIA1)*100 >= -10
THEN SET MENSAJE = "AMARILLO";
ELSE SET MENSAJE = "ROJO";
END IF;
SELECT MENSAJE;
END
*/

CALL VARIACION("2016-01-01","2017-01-01");
CALL VARIACION("2015-01-01","2016-01-01");
CALL VARIACION("2018-01-01","2019-01-01");

/*CASE 
CREATE DEFINER=`root`@`localhost` PROCEDURE `DEFINE_SABOR`(VCODIGO VARCHAR(20))
BEGIN
DECLARE VSABOR VARCHAR(20);
SELECT SABOR INTO VSABOR FROM TABLA_DE_PRODUCTOS WHERE CODIGO_DEL_PRODUCTO = VCODIGO;
CASE VSABOR
WHEN "MARACUYA" THEN SELECT "MUY RICO";
WHEN "LIMON" THEN SELECT "MUY RICO";
WHEN "FRUTILLA" THEN SELECT "MUY RICO";
WHEN "UVA" THEN SELECT "MUY RICO";
WHEN "SANDIA" THEN SELECT "RICO";
WHEN "MANGO" THEN SELECT "RICO";
ELSE SELECT "NORMAL";
END CASE;
END
*/

SELECT * FROM TABLA_DE_PRODUCTOS;

CALL DEFINE_SABOR(1000889);
CALL DEFINE_SABOR(1002767);
CALL DEFINE_SABOR(1078680);

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `PRECIO_PRODUCTO_CASE`(VCODIGO VARCHAR(20))
BEGIN
DECLARE VRESULTADO VARCHAR(40);
DECLARE VPRECIO FLOAT;
SELECT PRECIO_DE_LISTA INTO VPRECIO FROM TABLA_DE_PRODUCTOS 
WHERE CODIGO_DEL_PRODUCTO = VCODIGO;
CASE 
WHEN VPRECIO >=12 THEN SET VRESULTADO = "PRODUCTO COSTOSO";
WHEN VPRECIO >=7 AND VPRECIO <12 THEN SET VRESULTADO = "PRODUCTO ASEQUIBLE";
WHEN VPRECIO < 7 THEN SET VRESULTADO = "PRODUCTO BARATO";
END CASE;
SELECT VRESULTADO;
END
*/

CALL PRECIO_PRODUCTO_CASE(1000889);
CALL PRECIO_PRODUCTO_CASE(1002334);
CALL PRECIO_PRODUCTO_CASE(1022450);

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `VARIACION_CASE`(VFECHA1 DATE, VFECHA2 DATE)
BEGIN
DECLARE SUMATORIA1 FLOAT;
DECLARE SUMATORIA2 FLOAT;
DECLARE MENSAJE VARCHAR(40);

SELECT SUM(B.CANTIDAD * B.PRECIO) INTO SUMATORIA1 FROM FACTURAS A 
INNER JOIN ITEMS_FACTURAS B
ON A.NUMERO = B.NUMERO
WHERE FECHA_VENTA = VFECHA1;
SELECT SUM(B.CANTIDAD * B.PRECIO) INTO SUMATORIA2 FROM FACTURAS A 
INNER JOIN ITEMS_FACTURAS B
ON A.NUMERO = B.NUMERO
WHERE FECHA_VENTA = VFECHA2;
CASE
WHEN ((SUMATORIA2- SUMATORIA1)/SUMATORIA1)*100 > 10 THEN SET MENSAJE = "VERDE";
WHEN ((SUMATORIA2- SUMATORIA1)/SUMATORIA1)*100 <= 10 AND ((SUMATORIA2- SUMATORIA1)/SUMATORIA1)*100 >= -10
THEN SET MENSAJE = "AMARILLO";
WHEN ((SUMATORIA2- SUMATORIA1)/SUMATORIA1)*100 < -10 THEN SET MENSAJE = "ROJO";
END CASE;
SELECT MENSAJE;
END
*/

CALL VARIACION_CASE("2016-01-01","2017-01-01");
CALL VARIACION_CASE("2015-01-01","2016-01-01");
CALL VARIACION_CASE("2018-01-01","2019-01-01");

/*CASE ERROR HANDLER

CREATE DEFINER=`root`@`localhost` PROCEDURE `DEFINE_SABOR_CON_ERROR`(VCODIGO VARCHAR(20))
BEGIN
DECLARE VSABOR VARCHAR(20);
DECLARE MENSAJEERROR VARCHAR(20) default "SABOR NO DEFINIDO";
DECLARE CONTINUE HANDLER FOR 1339 SELECT MENSAJEERROR; 
SELECT SABOR INTO VSABOR FROM TABLA_DE_PRODUCTOS WHERE CODIGO_DEL_PRODUCTO = VCODIGO;
CASE VSABOR
WHEN "MARACUYA" THEN SELECT "MUY RICO";
WHEN "LIMON" THEN SELECT "MUY RICO";
WHEN "FRUTILLA" THEN SELECT "MUY RICO";
WHEN "UVA" THEN SELECT "MUY RICO";
WHEN "SANDIA" THEN SELECT "RICO";
WHEN "MANGO" THEN SELECT "RICO";
END CASE;
END*/

CALL DEFINE_SABOR_CON_ERROR(1000889);
CALL DEFINE_SABOR_CON_ERROR(1002767);
CALL DEFINE_SABOR_CON_ERROR(1078680);

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `SUMA_DIAS_FACTURAS`(VFINICIAL DATE, VFFINAL DATE)
BEGIN
DECLARE VFECHA DATE;
DECLARE MENSAJE_ERROR VARCHAR(100);
SET VFECHA = VFINICIAL;
SET MENSAJE_ERROR = "LA FECHA FINAL ES ANTERIOR A LA INICIAL";
CASE 
WHEN VFINICIAL > VFFINAL THEN SELECT MENSAJE_ERROR;
WHEN VFINICIAL < VFFINAL THEN 
CREATE TABLE IF NOT EXISTS RESULTADO(FECHA DATE, C INT);

WHILE VFECHA <= VFFINAL
DO 
INSERT INTO RESULTADO
SELECT FECHA_VENTA, COUNT(FECHA_VENTA) AS SUMA_FACTURAS FROM FACTURAS
WHERE FECHA_VENTA = VFECHA
GROUP BY FECHA_VENTA;
SET VFECHA = ADDDATE(VFECHA, INTERVAL 1 DAY);
END WHILE;
END CASE;
SELECT * FROM RESULTADO;
DROP TABLE RESULTADO;
END
*/

CALL SUMA_DIAS_FACTURAS("2017-01-01","2017-01-10");

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `SUMA_DIAS_FACTURAS_ALURA`()
BEGIN
DECLARE fecha_inicial DATE;
DECLARE fecha_final DATE;
DECLARE n_facturas INT;
SET fecha_inicial = '20170101';
SET fecha_final = '20170110';
WHILE fecha_inicial <= fecha_final
DO
SELECT COUNT(*) INTO n_facturas  FROM facturas WHERE FECHA_VENTA = fecha_inicial;
SELECT concat(DATE_FORMAT(fecha_inicial, '%d/%m/%Y'), '-' , CAST(n_facturas AS CHAR(50))) AS RESULTADO;
SELECT ADDDATE(fecha_inicial, INTERVAL 1 DAY) INTO fecha_inicial;
END WHILE;
END
*/

CALL SUMA_DIAS_FACTURAS_ALURA;

/*LOOPING WHILE
CREATE DEFINER=`root`@`localhost` PROCEDURE `LOOPING`(VINICIAL INT, VFINAL INT)
BEGIN
DECLARE VCONTADOR INT;
SET VCONTADOR = VINICIAL;
DELETE FROM TB_LOOPING;
WHILE VCONTADOR <= VFINAL
DO
INSERT INTO TB_LOOPING VALUES(VCONTADOR);
SET VCONTADOR = VCONTADOR+1;
END WHILE;
SELECT * FROM TB_LOOPING;
END
*/

CALL LOOPING(1,3);

/*CURSORES

CREATE DEFINER=`root`@`localhost` PROCEDURE `CURSOR1`()
BEGIN
DECLARE VNOMBRE VARCHAR(50);
DECLARE C CURSOR FOR SELECT NOMBRE FROM TABLA_DE_CLIENTES LIMIT 4;
OPEN C;
FETCH C INTO VNOMBRE;
SELECT VNOMBRE;
FETCH C INTO VNOMBRE;
SELECT VNOMBRE;
FETCH C INTO VNOMBRE;
SELECT VNOMBRE;
FETCH C INTO VNOMBRE;
SELECT VNOMBRE;
CLOSE C;
END
*/

CALL CURSOR1;

/*CURSOR WHILE

CREATE DEFINER=`root`@`localhost` PROCEDURE `CURSOR_WHILE`()
BEGIN
DECLARE FIN_C INT DEFAULT 0;
DECLARE VNOMBRE VARCHAR(50);
DECLARE C CURSOR FOR SELECT NOMBRE FROM TABLA_DE_CLIENTES;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIN_C = 1;
OPEN C;
WHILE FIN_C=0
DO
FETCH C INTO VNOMBRE;
IF FIN_C=0 THEN SELECT VNOMBRE;
END IF;
END WHILE;
CLOSE C;
END
*/

CALL CURSOR_WHILE;

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `LIMITE_CREDITOS`()
BEGIN
DECLARE C_FINAL INT default 0;
DECLARE VTOTAL_CREDITO FLOAT DEFAULT 0;
DECLARE VLIMITE FLOAT;
DECLARE C CURSOR FOR SELECT LIMITE_DE_CREDITO FROM TABLA_DE_CLIENTES;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET C_FINAL = 1;
OPEN C;
WHILE C_FINAL = 0
 DO 
	FETCH C INTO VLIMITE;
		IF C_FINAL = 0 THEN 
			SELECT VLIMITE;
			SET VTOTAL_CREDITO = VTOTAL_CREDITO + VLIMITE;
		END IF;
END WHILE;
CLOSE C;
SELECT VTOTAL_CREDITO;
END
*/

CALL LIMITE_CREDITOS;

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `CURSOSR2_WHILE`()
BEGIN
DECLARE FIN_C INT DEFAULT 0;
DECLARE VNOMBRE VARCHAR(50);
DECLARE C CURSOR FOR SELECT NOMBRE FROM TABLA_DE_CLIENTES LIMIT 4;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIN_C = 1;
OPEN C;
WHILE FIN_C=0
DO
FETCH C INTO VNOMBRE;
IF FIN_C=0 THEN SELECT VNOMBRE;
END IF;
END WHILE;
CLOSE C;
END
*/

CALL CURSOSR2_WHILE;

/*CURSOR VARIOS CAMPOS
CREATE DEFINER=`root`@`localhost` PROCEDURE `CURSOR_LOOPING_VARIOS_CAMPOS`()
BEGIN
DECLARE FIN_C INT DEFAULT 0;
DECLARE VBARRIO, VCIUDAD, VESTADO, VCP VARCHAR(20);
DECLARE VNOMBRE, VDIRECCION VARCHAR(150);
DECLARE C CURSOR FOR SELECT NOMBRE, DIRECCION_1, BARRIO, CIUDAD, ESTADO, CP FROM TABLA_DE_CLIENTES;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIN_C = 1;
OPEN C;
WHILE FIN_C=0
DO
FETCH C INTO VNOMBRE, VDIRECCION, VBARRIO, VCIUDAD, VESTADO, VCP;
IF FIN_C=0 THEN SELECT VNOMBRE, VDIRECCION, VBARRIO, VCIUDAD, VESTADO, VCP;
END IF;
END WHILE;
CLOSE C;
END
*/

CALL CURSOR_LOOPING_VARIOS_CAMPOS;

/*
CREATE DEFINER=`root`@`localhost` PROCEDURE `TOTAL_FACTURACION`(VFECHA DATE)
BEGIN
DECLARE VANIO INT default year(VFECHA);
DECLARE VMES INT default month(VFECHA);
DECLARE VCANTIDAD INT;
DECLARE VPRECIO FLOAT;
DECLARE FACTURACION FLOAT;
DECLARE TOTAL FLOAT DEFAULT 0;
DECLARE C_FINAL INT DEFAULT 0;

DECLARE C CURSOR FOR SELECT IFa.CANTIDAD, IFa.PRECIO FROM items_facturas IFa
INNER JOIN facturas  F ON F.NUMERO = IFa.NUMERO
WHERE MONTH(F.FECHA_VENTA) = VMES AND YEAR(F.FECHA_VENTA) = VANIO LIMIT 10; 
DECLARE CONTINUE HANDLER FOR NOT FOUND SET C_FINAL = 1;
OPEN C;
WHILE C_FINAL = 0
DO
fetch C INTO VCANTIDAD, VPRECIO;
SET FACTURACION = (VCANTIDAD * VPRECIO);
IF C_FINAL = 0
THEN SELECT VCANTIDAD, VPRECIO; SET TOTAL = TOTAL + FACTURACION;
END IF;
END WHILE;
CLOSE C;
SELECT TOTAL;
END
*/

CALL TOTAL_FACTURACION("2016-01-01");

/*PARA PERMITR QUE EL USUARIO PUEDA CREAR FUNCIONES
SET GLOBAL LOG_BIN_TRUST_FUNCTION_CREATORS = 1;
*/
SET GLOBAL LOG_BIN_TRUST_FUNCTION_CREATORS = 1;

/*
CREATE DEFINER=`root`@`localhost` FUNCTION `DEFINE_SABOR`(VSABOR VARCHAR(50)) RETURNS varchar(50) CHARSET utf8mb4
BEGIN
DECLARE RETORNO VARCHAR(50);
CASE VSABOR
WHEN 'MARACUYA' THEN SET RETORNO = "MUY RICO";
WHEN 'LIMON' THEN SET RETORNO = "MUY RICO";
WHEN 'FRUTILLA' THEN SET RETORNO = "MUY RICO";
WHEN 'UVA' THEN SET RETORNO = "MUY RICO";
WHEN 'SANDIA' THEN SET RETORNO = "RICO";
WHEN 'MANGO' THEN SET RETORNO = "RICO";
ELSE SET RETORNO = "NORMAL";
END CASE;
RETURN RETORNO;
END
*/

SELECT NOMBRE_DEL_PRODUCTO, SABOR, DEFINE_SABOR(SABOR) AS GUSTO FROM TABLA_DE_PRODUCTOS; 

SELECT NOMBRE_DEL_PRODUCTO, SABOR FROM TABLA_DE_PRODUCTOS WHERE DEFINE_SABOR(SABOR) = "MUY RICO"; 

/*
CREATE DEFINER=`root`@`localhost` FUNCTION `NUMERO_FACTURAS`(VFECHA DATE) RETURNS int
BEGIN
DECLARE n_facturas INT;
SELECT COUNT(FECHA_VENTA) INTO n_facturas FROM facturas WHERE FECHA_VENTA = VFECHA;
RETURN n_facturas;
END
*/

SELECT * FROM FACTURAS;

SELECT NUMERO_FACTURAS("2016-01-01") AS RESULTADO;




