USE jugos_ventas;

SELECT * FROM facturas;

SELECT * FROM tabla_de_clientes;

/*AL UITLIZAR AS ANTES DE EL NOMBRE DEL CAMPO, PODEMOS ESPECIFICAR EL TITULO CON EL CUAL 
APARECERA EL CAMPO*/

SELECT DNI as Matrícula, NOMBRE as Registro FROM tabla_de_clientes;

SELECT * FROM tabla_de_productos;

/*WHERE NOS PERMITE BUSCAR REGISTROS QUE CONTENGAN ALGUNA CONDICION*/

SELECT * FROM tabla_de_productos WHERE SABOR='uva'; 

SELECT * FROM tabla_de_productos WHERE PRECIO_DE_LISTA <=16;

/*BETWEEN NOS RETORNA LOS REGISTRO ENTRE UN RANGO DE VALORES*/

SELECT * FROM tabla_de_productos WHERE PRECIO_DE_LISTA BETWEEN 16 AND 16.02;

/*LIKE NOS RETORNA REGISTROS QUE CONTENGAN LA CONDICIONAL %CONDICIONAL*/

SELECT * FROM TABLA_DE_PRODUCTOS WHERE SABOR LIKE '%MANZANA';

SELECT * FROM TABLA_DE_PRODUCTOS WHERE SABOR LIKE '%MANZANA' AND ENVASE='BOTELLA PET';

SELECT * FROM TABLA_DE_CLIENTES WHERE NOMBRE LIKE '%EZ%';

/*DISTINCT NOS RETORNA LOS REGISTROS NO REPETIDOS EN EL LA DB*/

SELECT DISTINCT ENVASE , TAMANO FROM tabla_de_productos;

SELECT distinct ENVASE, TAMANO, SABOR FROM TABLA_DE_PRODUCTOS WHERE SABOR = 'NARANJA';

SELECT DISTINCT BARRIO FROM tabla_de_clientes WHERE CIUDAD = 'CIUDAD DE MEXICO';

/*LIMIT NOS PERMITE LIMITAR EL CONJUNTO DE REGISTROS RETORNADOS POR LA CONSULTA; SE PUEDE INDICAR 
TANTO EL INDICE COMO EL NUMERO DE REGISTROS RETORNADOS EJ : SELECT * FROM TB LIMIT 2,3 = NOS RETORNARA
LOS TRES REGISTROS DESPUES DEL INDICE 2*/

SELECT * FROM tabla_de_clientes LIMIT 5;

SELECT * FROM tabla_de_clientes LIMIT 5,2;

SELECT* FROM FACTURAS WHERE FECHA_VENTA > '2017-01-01' LIMIT 10;

/*ORDER BY NOS PERMITE ORDENAR EL RETORNO DE REGISTROS POR ALGUNA CONDICION*/

SELECT * FROM tabla_de_productos ORDER BY NOMBRE_DEL_PRODUCTO;

SELECT * FROM tabla_de_productos ORDER BY PRECIO_DE_LISTA DESC;

SELECT * FROM tabla_de_productos ORDER BY NOMBRE_DEL_PRODUCTO DESC, PRECIO_DE_LISTA ASC;

SELECT * FROM items_facturas WHERE CODIGO_DEL_PRODUCTO = 1101035 ORDER BY CANTIDAD DESC LIMIT 10;

/*GROUP BY RETORNA LA OPERACION DE LO VALORES DEL CRITERIO DADO AGRUPANDOLOS POR EL CAMPO. 
PUEDE UTILZARSE: SUM(), MAX(), MIN(), AVG(), COUNT().
EJ: SELECT X, SUM(Y) FROM TB GROUP BY X; 
A:1, A:2, B:1, B:3 = A:3, B:4
SI SE OMITE EL CAMPO  DE AGREGACION, LA OPEACION SE EFECTUA EN TODA LA TABLA.
*/

SELECT ESTADO, LIMITE_DE_CREDITO FROM tabla_de_clientes;

SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS LIMITE_TOTAL FROM TABLA_DE_CLIENTES GROUP BY ESTADO;

SELECT ENVASE, PRECIO_DE_LISTA FROM TABLA_DE_PRODUCTOS;

SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS PRECIO_MAYOR FROM TABLA_DE_PRODUCTOS GROUP BY ENVASE;

SELECT ENVASE, COUNT(*) FROM TABLA_DE_PRODUCTOS GROUP BY ENVASE;

SELECT BARRIO, SUM(LIMITE_DE_CREDITO) AS LIMITE FROM TABLA_DE_CLIENTES GROUP BY BARRIO;

SELECT MAX(CANTIDAD) AS CANTIDAD_MAXIMA FROM items_facturas WHERE CODIGO_DEL_PRODUCTO = 1101035;

SELECT COUNT(*) AS VENTAS_TOTALES FROM items_facturas where CODIGO_DEL_PRODUCTO = 1101035 AND CANTIDAD = 99;

/*HAVING ES UN FILTRO  QUE SE APLICA SOBRE EL RESULTADO DE UNA AGREGACION
EJ: A:1, A:2, A:3, B:1, B:3, C:1 
SELECT X,SUM(Y) AS SUM_Y FROM TB GRUOUP BY X HAVING SUM(Y)>4
A:6;
*/

SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS LIMITE_TOTAL FROM TABLA_DE_CLIENTES GROUP BY ESTADO HAVING LIMITE_TOTAL>300000;

SELECT ENVASE,MAX(PRECIO_DE_LISTA) AS VALOR_MAXIMO, MIN(PRECIO_DE_LISTA) AS VALOR_MINIMO 
FROM tabla_de_productos GROUP BY ENVASE;

SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS VALOR_MAXIMO, MIN(PRECIO_DE_LISTA) AS VALOR_MINIMO
FROM TABLA_DE_PRODUCTOS GROUP BY ENVASE HAVING SUM(PRECIO_DE_LISTA) >=80
AND MAX(PRECIO_DE_LISTA)>=5;

SELECT DNI, COUNT(*) FROM FACTURAS 
WHERE year(FECHA_VENTA) = 2016 GROUP BY DNI HAVING COUNT(*) >2000;

/*CASE SE REALIZA UN TEST EN UNO O MAS CAMPOS Y DEPENDIENDO DEL RESULTADO, OBTENDREMOS UN VALOR
ESPECIFICO*/

/*EMPLEADO EN CLASIFICACION DE REGISTROS
EJ:
A:8, B:3, C:7, D:5, E:10
SELECT X, CASE WHEN Y>=8 AND Y<=10 THEN 'MUY BUENO' 
WHEN Y>=7 AND Y<=8 THEN 'BUENO' 
ELSE 'MALO' 
FROM TB;

A:MUY BUENO
B:MALO
C:BUENO
D:MALO
E:NUY BUENO
*/

SELECT * FROM tabla_de_productos;

SELECT NOMBRE_DEL_PRODUCTO, PRECIO_DE_LISTA, 
CASE 
WHEN PRECIO_DE_LISTA >=12 THEN 'ES COSTOSO' 
WHEN PRECIO_DE_LISTA >= 5 AND PRECIO_DE_LISTA <12 THEN 'ASEQUIBLE'
ELSE 'BARATO' 
END AS PRECIO
FROM TABLA_DE_PRODUCTOS ORDER BY PRECIO_DE_LISTA;

SELECT ENVASE, SABOR,
CASE
WHEN PRECIO_DE_LISTA >=12 THEN 'ES COSTOSO'
WHEN PRECIO_DE_LISTA >=5 AND PRECIO_DE_LISTA <12 THEN 'ASEQUIBLE'
ELSE 'BARATO'
END AS PRECIO, MIN(PRECIO_DE_LISTA) AS PRECIO_MINIMO 
FROM tabla_de_productos 
WHERE TAMANO = '700ML' 
GROUP BY ENVASE,
CASE
WHEN PRECIO_DE_LISTA >=12 THEN 'ES COSTOSO'
WHEN PRECIO_DE_LISTA >=5 AND PRECIO_DE_LISTA <12 THEN 'ASEQUIBLE'
ELSE 'BARATO'
END 
ORDER BY ENVASE;

SELECT NOMBRE, FECHA_DE_NACIMIENTO,
CASE 
WHEN YEAR(FECHA_DE_NACIMIENTO)<1990 THEN 'VIEJOS'
WHEN YEAR(FECHA_DE_NACIMIENTO)>=1990 AND year(FECHA_DE_NACIMIENTO) <1995 THEN 'JOVENES'
ELSE 'NIÑOS'
END AS CLASIFICACION
FROM TABLA_DE_CLIENTES
ORDER BY FECHA_DE_NACIMIENTO;

/*INNER JOIN PERMITE REALIZAR CONSULTAS DENTRO DE 2 TABLAS QUE SE RELACIONAN POR UNA LLAVE FORANEA
EJ: ALEJANDRO:1, BETO:2, CARLA:3 | 1:CAFE, 5:JUGO, 3: COCA
SELECT A.NOMBRE, B.BEBIDA FROM  'TABLA' A INNER JOIN  'TABLA' B ON A.ID = B.ID
ALEJANDRO:CAFE, CARLA:COCA

TIPOS: 
	-LEFT: MISMA SINTAXIS, SOLO CAMBIA INNER POR LEFT, DEVUELVE TODOS LOS REGISTROS 
    DE LA TABLA DERECHA (A)
	EJ: ALEJANDRO:CAFE, BETO:NULL, CARLA:COCA

	-RIGHT: MISMA SINTAXIS, SOLO CAMBIA INNER POR RIGHT, DEVULVE TODOS LOS REGISTROS
    DE LA TABLA IZQUIERDA (B)
    EJ: ALEJANDRO:CAFE, JUGO:NULL, CARLA:COCA
    
    -FULL JOIN: MSIMA SINTAXIS, SOLO CAMBIA INNER POR FULL DEVUELVE TODOS LOS REGISTROS 
    DE AMBAS TABLAS
    EJ: ALEJANDRO:CAFE, BETO:NULL, JUGO:NULL, CARLA:COCA
    
    CROSS JOIN: DEVUELVE EL PRODUCTO CARTESIANO DE LOS REGISTROS DE LAS TABLA, DEVULEVE
    TODOS LOS REGISTROS DE LA TABLA
    A CON LOS REGISTROS DE LA TABLA B.
    EJ: SELECT  A.NOMBRE, B.HOBBY FROM A, B;
    ALEJANDRO:CAFE, ALEJANDRO:JUGO, ALEJANDRO: COCA, BETO:CAFE, BETO:JUEGO, BETO:COCA, 
    CARLA:CAFE, CARLA:JUGO, CARLA:COCA
*/

SELECT * FROM tabla_de_vendedores;
SELECT * FROM facturas;
SELECT * FROM items_facturas;

SELECT * FROM tabla_de_vendedores A 
INNER JOIN FACTURAS B 
ON A.MATRICULA= B.MATRICULA;

SELECT A.NOMBRE, B.MATRICULA, COUNT(*) FROM tabla_de_vendedores A 
INNER JOIN FACTURAS B 
ON A.MATRICULA = B.MATRICULA GROUP BY A.NOMBRE, B.MATRICULA;

SELECT YEAR(FECHA_VENTA), SUM(CANTIDAD*PRECIO) AS FACTURACION
FROM FACTURAS F
INNER JOIN items_facturas ITF
ON F.NUMERO = ITF.NUMERO GROUP BY YEAR(FECHA_VENTA);

SELECT COUNT(*) FROM tabla_de_clientes;

SELECT distinct A.DNI, A.NOMBRE, B.DNI FROM tabla_de_clientes A
INNER JOIN facturas B
ON A.DNI = B.DNI;

SELECT DISTINCT A.DNI, A.NOMBRE, A.CIUDAD, B.DNI FROM TABLA_DE_CLIENTES A
LEFT JOIN FACTURAS B
ON A.DNI = B.DNI
WHERE B.DNI IS NULL;

SELECT DISTINCT A.DNI, B.NOMBRE, B.CIUDAD, B.DNI FROM FACTURAS A 
RIGHT JOIN tabla_de_clientes B
ON A.DNI = B.DNI
WHERE A.DNI IS NULL;

SELECT * FROM tabla_de_clientes;

SELECT * FROM tabla_de_vendedores;

SELECT tabla_de_clientes.NOMBRE AS NOMBRE_CLIENTE, tabla_de_vendedores.NOMBRE AS NOMBRE_VENDEDOR, tabla_de_vendedores.BARRIO
FROM tabla_de_clientes
INNER JOIN tabla_de_vendedores
ON tabla_de_clientes.BARRIO = tabla_de_vendedores.BARRIO;

SELECT A.NOMBRE AS NOMBRE_CLIENTE, A.BARRIO, A.CIUDAD, B.NOMBRE AS NOMBRE_VENDEDOR
FROM TABLA_DE_CLIENTES A
LEFT JOIN TABLA_DE_VENDEDORES B
ON A.BARRIO = B.BARRIO;

SELECT A.NOMBRE AS NOMBRE_CLIENTE, A.BARRIO, A.CIUDAD, B.NOMBRE AS NOMBRE_VENDEDOR
FROM TABLA_DE_CLIENTES A, tabla_de_vendedores B
WHERE A.BARRIO = B.BARRIO;
 
 /*UNION: PERMITE UNIR 2 O MAS TABLAS (IMPLICITAMENTE EJECUTA DISTINCT)
   EL NUMERO DE CAMPOS  EN LAS TABLAS DEBE SER IGUAL (MISMO CAMPOS Y MISMOS TIPOS)*/
   
SELECT DISTINCT BARRIO FROM tabla_de_clientes;
   
SELECT DISTINCT BARRIO FROM tabla_de_vendedores;
   
SELECT DISTINCT BARRIO FROM tabla_de_clientes
UNION
SELECT DISTINCT BARRIO FROM tabla_de_vendedores;

SELECT DISTINCT BARRIO, NOMBRE, 'CLIENTE' AS TIPO, DNI AS REGISTRO FROM tabla_de_clientes
UNION ALL
SELECT DISTINCT BARRIO, NOMBRE, 'VENDEDOR', MATRICULA FROM tabla_de_vendedores;


/*FORMA DE HACER UN FULL JOIN IN MYSQL
SE USA UN LEFT JOIN Y UN RIGHT JOIN UNIDOS POR UN UNION*/
SELECT A.NOMBRE AS NOMBRE_CLIENTE, A.BARRIO, A.CIUDAD, B.NOMBRE AS NOMBRE_VENDEDOR
FROM TABLA_DE_CLIENTES A
LEFT JOIN TABLA_DE_VENDEDORES B
ON A.BARRIO = B.BARRIO
UNION
SELECT A.NOMBRE AS NOMBRE_CLIENTE, A.BARRIO, A.CIUDAD, B.NOMBRE AS NOMBRE_VENDEDOR
FROM TABLA_DE_CLIENTES A
RIGHT JOIN TABLA_DE_VENDEDORES B
ON A.BARRIO = B.BARRIO;

/*SUBCONSULTAS: PERMITE REALIZAR UNA COSULTA AL INTERIORDE OTRA.*/

SELECT DISTINCT BARRIO FROM tabla_de_vendedores; 

SELECT * FROM tabla_de_clientes WHERE BARRIO IN (SELECT distinct BARRIO FROM tabla_de_vendedores);

SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS PRECIO_MAXIMO FROM tabla_de_productos GROUP BY ENVASE;

SELECT X.ENVASE, X.PRECIO_MAXIMO FROM
(SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS PRECIO_MAXIMO FROM tabla_de_productos GROUP BY ENVASE) X
WHERE X.PRECIO_MAXIMO >=10;

SELECT X.DNI, X.CUENTA FROM 
(SELECT DNI, COUNT(*) AS CUENTA FROM FACTURAS WHERE YEAR(FECHA_VENTA) = 2016 GROUP BY DNI) X
WHERE X.CUENTA >2000;

/*VIEWS: TABLA LOGICA QUE RESULTA DE UNA CONSULTA QUE PUEDE SER USADA POSTERIORMENTE
EN CUALQUIER OTRA.

SE PUEDEN CREAR VIEW POR MEDIO DEL ASISTENTE O POR MEDIO DE COMANDO SQL*/

SELECT ENVASE, MAX(PRECIO_DE_LISTA) AS PRECIO_MAXIMO FROM tabla_de_productos
GROUP BY ENVASE;

SELECT X.ENVASE, X.PRECIO_MAXIMO FROM VW_ENVASES_GRANDES X 
WHERE PRECIO_MAXIMO >=10;

SELECT A.NOMBRE_DEL_PRODUCTO, A.ENVASE, A.PRECIO_DE_LISTA, B.PRECIO_MAXIMO, 
((A.PRECIO_DE_LISTA/B.PRECIO_MAXIMO)-1) * 100 AS PORCENTAJE_DE_VARIACION
FROM tabla_de_productos A
INNER JOIN VW_ENVASES_GRANDES B 
ON A.ENVASE = B.ENVASE;

/*FUNCIONES
PARA MAYOR INFORMACION DE FUNCIONES ACCEDA A LA DOCUMENTACION DE MYSQL O W3SCHOOL*/

/*STRINGS*/

SELECT NOMBRE, 
CONCAT(DIRECCION_1, ", ", BARRIO, ", ", CIUDAD, ", ", ESTADO, ", ", CP) AS DIRECCION_COMPLETA 
FROM tabla_de_clientes;

/*FECHAS*/

SELECT current_date();

SELECT current_timestamp();

SELECT day(current_date());

SELECT dayname(CURRENT_DATE());

SELECT DATEDIFF(CURRENT_DATE(),"1995-09-08") AS DIFERENCIA_DE_DIAS;

SELECT DISTINCT FECHA_VENTA, 
dayname(FECHA_VENTA) AS DIA, monthname(FECHA_VENTA) AS MES, YEAR(FECHA_VENTA) AS ANO 
FROM FACTURAS;

SELECT NOMBRE,
concat((YEAR(current_date()) - YEAR(FECHA_DE_NACIMIENTO)), ' AÑOS') AS EDAD 
FROM tabla_de_clientes;

/*MATEMATICAS*/

SELECT (34 +346-67)/15*29 as resultado;

SELECT ceiling((34 +346-67)/15*29) as resultado;

SELECT floor((34 +346-67)/15*29) as resultado;

SELECT round((rand()*100)/2) AS NUMERO_ALEATORIO_ENTRE_0_Y_50;

SELECT NUMERO, CANTIDAD, PRECIO, ROUND(CANTIDAD * PRECIO,2) AS FACTURACION FROM items_facturas;

SELECT * FROM FACTURAS;

SELECT YEAR(FECHA_VENTA), floor(SUM(IMPUESTO*(CANTIDAD*PRECIO))) AS RESULTADO
FROM facturas F
INNER JOIN items_facturas I
ON F.NUMERO = I.NUMERO
WHERE YEAR(FECHA_VENTA)=2016
GROUP BY year(FECHA_VENTA);

/*CONVERSION DE DATOS*/

SELECT current_timestamp() AS RESULTADO;

SELECT CONCAT('LA FECHA Y LA HORA DE HOY SON: ', CURRENT_TIMESTAMP()) AS RESULTADO;

SELECT CONCAT('LA FECHA Y HORARIO SON: ', DATE_FORMAT(CURRENT_TIMESTAMP(), "%W, %d/%m/%Y a las %T")) AS RESULTADO;

SELECT CONVERT(23.5, CHAR) AS RESULTADO;

SELECT substring(CONVERT(23.5, CHAR),3,1) AS RESULTADO;

SELECT * FROM TABLA_DE_CLIENTES;
SELECT * FROM facturas WHERE year(FECHA_VENTA)=2016;
SELECT NUMERO,ROUND(SUM(CANTIDAD*PRECIO),2) AS FACTURACION FROM items_facturas GROUP BY NUMERO;

SELECT DISTINCT A.DNI, round(sum(B.CANTIDAD * B.PRECIO)) AS FACTURACION FROM FACTURAS A
INNER JOIN items_facturas B
ON A.NUMERO = B.NUMERO 
WHERE YEAR(FECHA_VENTA)=2016
GROUP BY A.DNI;

SELECT concat('EL CLIENTE ', C.NOMBRE, 
' FACTURÓ ', CONVERT( SUM(B.CANTIDAD * B.PRECIO), CHAR), 
' EN EL AÑO ', CONVERT(YEAR(A.FECHA_VENTA),CHAR)) AS FRASE
FROM FACTURAS A
INNER JOIN items_facturas B 
ON A.NUMERO = B.NUMERO
INNER JOIN tabla_de_clientes C
ON A.DNI = C.DNI
WHERE YEAR(FECHA_VENTA)=2016
GROUP BY C.NOMBRE, YEAR(FECHA_VENTA);

SELECT CONCAT('El cliente ', TC.NOMBRE, ' facturó ', 
CONVERT(SUM(IFa.CANTIDAD * IFa.precio), CHAR(20))
 , ' en el año ', CONVERT(YEAR(F.FECHA_VENTA), CHAR(20))) AS FRASE FROM facturas F
INNER JOIN items_facturas IFa ON F.NUMERO = IFa.NUMERO
INNER JOIN tabla_de_clientes TC ON F.DNI = TC.DNI
WHERE YEAR(FECHA_VENTA) = 2016
GROUP BY TC.NOMBRE, YEAR(FECHA_VENTA);

/*REPORTES*/

SELECT * FROM FACTURAS;
SELECT * FROM items_facturas;

SELECT F.DNI, F.FECHA_VENTA, I.CANTIDAD FROM facturas F
INNER JOIN items_facturas I
ON F.NUMERO= I.NUMERO;

SELECT F.DNI, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y') AS FECHA , I.CANTIDAD FROM facturas F
INNER JOIN items_facturas I
ON F.NUMERO= I.NUMERO;

SELECT F.DNI, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y') AS FECHA , I.CANTIDAD FROM facturas F
INNER JOIN items_facturas I
ON F.NUMERO= I.NUMERO;

/*CANTIDAD DE VENTAS POR MES PARA CADA CLIENTE*/

SELECT F.DNI, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y') AS FECHA , 
SUM(I.CANTIDAD) AS CANTIDAD_VENDIDA FROM facturas F
INNER JOIN items_facturas I
ON F.NUMERO= I.NUMERO
GROUP BY F.DNI, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y') ;

/*CONOCER EL LIMITE DE VENTAS POR CLIENTE (EN VOLUMEN EN DECILITROS)*/

SELECT A.DNI, A.NOMBRE, A.MES_AÑO, 
A.CANTIDAD_VENDIDA - A.CANTIDAD_MAXIMA AS DIFERENCIA,
CASE
   WHEN  (A.CANTIDAD_VENDIDA - A.CANTIDAD_MAXIMA) <= 0 THEN 'Venta Válida'
   ELSE 'Venta Inválida'
END AS STATUS_VENTA, ROUND((1 - (A.CANTIDAD_MAXIMA/A.CANTIDAD_VENDIDA)) * 100,2) AS PORCENTAJE
 FROM(
SELECT F.DNI, TC.NOMBRE, DATE_FORMAT(F.FECHA_VENTA, "%m - %Y") AS MES_AÑO, 
SUM(IFa.CANTIDAD) AS CANTIDAD_VENDIDA, 
MAX(VOLUMEN_DE_COMPRA)/10 AS CANTIDAD_MAXIMA  
FROM facturas F 
INNER JOIN 
items_facturas IFa
ON F.NUMERO = IFa.NUMERO
INNER JOIN 
tabla_de_clientes TC
ON TC.DNI = F.DNI
GROUP BY
F.DNI, TC.NOMBRE, DATE_FORMAT(F.FECHA_VENTA, "%m - %Y"))A
WHERE (A.CANTIDAD_MAXIMA - A.CANTIDAD_VENDIDA) < 0;

/*PROCESO*/

SELECT DNI, NOMBRE,VOLUMEN_DE_COMPRA
FROM tabla_de_clientes ORDER BY VOLUMEN_DE_COMPRA DESC;
 
 SELECT MAX(VOLUMEN_DE_COMPRA) FROM TABLA_DE_CLIENTES;
 
SELECT F.DNI, TC.NOMBRE, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y') AS FECHA , 
SUM(I.CANTIDAD) AS CANTIDAD_VENDIDA,
TC.VOLUMEN_DE_COMPRA/10 AS CANTIDAD_MAXIMA
FROM facturas F
INNER JOIN items_facturas I
ON F.NUMERO= I.NUMERO
INNER JOIN tabla_de_clientes TC
ON TC.DNI= F.DNI
GROUP BY F.DNI, TC.NOMBRE, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y');


SELECT A.DNI, A.NOMBRE, A.FECHA,
A.CANTIDAD_VENDIDA - A.CANTIDAD_MAXIMA AS DIFERENCIA,
CASE 
WHEN (A.CANTIDAD_VENDIDA - A.CANTIDAD_MAXIMA) <= 0
THEN 'VENTA VALIDA'
ELSE 'VENTA IVALIDA'
END AS ESTATUS_VENTA
FROM (SELECT F.DNI, TC.NOMBRE, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y') AS FECHA , 
SUM(I.CANTIDAD) AS CANTIDAD_VENDIDA,
TC.VOLUMEN_DE_COMPRA/10 AS CANTIDAD_MAXIMA
FROM facturas F
INNER JOIN items_facturas I
ON F.NUMERO= I.NUMERO
INNER JOIN tabla_de_clientes TC
ON TC.DNI= F.DNI
GROUP BY F.DNI, TC.NOMBRE, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y'))A;

/*LISTAR A LOS CLIENTES CON VENTAS INVALIDAS DEL AÑO 2018 QUE HAN SUPERADO EL LIMITE POR
MAS DEL 50%, CALCULA LA DIFERENCIA ENTRE EL LIMITE DE VENTA MAXIMO Y CANTIDAD VENDIDA 
EN PORCENTAJES*/

SELECT A.DNI, A.NOMBRE, A.FECHA,
A.CANTIDAD_VENDIDA - A.CANTIDAD_MAXIMA AS DIFERENCIA
FROM (SELECT F.DNI, TC.NOMBRE, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y') AS FECHA , 
SUM(I.CANTIDAD) AS CANTIDAD_VENDIDA,
TC.VOLUMEN_DE_COMPRA/10 AS CANTIDAD_MAXIMA
FROM facturas F
INNER JOIN items_facturas I
ON F.NUMERO= I.NUMERO
INNER JOIN tabla_de_clientes TC
ON TC.DNI= F.DNI
GROUP BY F.DNI, TC.NOMBRE, DATE_FORMAT( F.FECHA_VENTA, '%m - %Y'))A
WHERE (A.CANTIDAD_MAXIMA - A.CANTIDAD_VENDIDA) < 0 AND ROUND((1 - (A.CANTIDAD_MAXIMA/A.CANTIDAD_VENDIDA)) * 100,2) > 50
AND A.FECHA LIKE "%2018";

SELECT A.DNI, A.NOMBRE, A.MES_AÑO, 
A.CANTIDAD_VENDIDA - A.CANTIDAD_MAXIMA AS DIFERENCIA,
CASE
   WHEN  (A.CANTIDAD_VENDIDA - A.CANTIDAD_MAXIMA) <= 0 THEN 'Venta Válida'
   ELSE 'Venta Inválida'
END AS STATUS_VENTA, ROUND((1 - (A.CANTIDAD_MAXIMA/A.CANTIDAD_VENDIDA)) * 100,2) AS PORCENTAJE
 FROM(
SELECT F.DNI, TC.NOMBRE, DATE_FORMAT(F.FECHA_VENTA, "%m - %Y") AS MES_AÑO, 
SUM(IFa.CANTIDAD) AS CANTIDAD_VENDIDA, 
MAX(VOLUMEN_DE_COMPRA)/10 AS CANTIDAD_MAXIMA  
FROM facturas F 
INNER JOIN 
items_facturas IFa
ON F.NUMERO = IFa.NUMERO
INNER JOIN 
tabla_de_clientes TC
ON TC.DNI = F.DNI
GROUP BY
F.DNI, TC.NOMBRE, DATE_FORMAT(F.FECHA_VENTA, "%m - %Y"))A
WHERE (A.CANTIDAD_MAXIMA - A.CANTIDAD_VENDIDA) < 0 AND ROUND((1 - (A.CANTIDAD_MAXIMA/A.CANTIDAD_VENDIDA)) * 100,2) > 50
AND A.MES_AÑO LIKE "%2018";

/*INFORME DE VENTAS POR SABOR EN EL AÑO 2016, CANTIDAD EN LITROS 
Y PORCETAJE DE PARTICIPACION EN ORDEN DESC*/

SELECT * FROM items_facturas;
SELECT * FROM tabla_de_productos;
SELECT * FROM FACTURAS; 

/*VENTAS POR SABOR EN EL AÑO 2016*/
SELECT P.SABOR, SUM(I.CANTIDAD) AS CANTIDAD_TOTAL, year(F.FECHA_VENTA) AS AÑO
FROM tabla_de_productos P
INNER JOIN items_facturas I
ON P.CODIGO_DEL_PRODUCTO = I.CODIGO_DEL_PRODUCTO
INNER JOIN facturas F
ON F.NUMERO = I.NUMERO
WHERE YEAR(FECHA_VENTA)= 2016
GROUP BY P.SABOR,year(F.FECHA_VENTA)
ORDER BY SUM(I.CANTIDAD) DESC;

/*VENTAS TOTALES EN EL AÑO 2016*/

SELECT SUM(I.CANTIDAD) AS CANTIDAD_TOTAL, year(F.FECHA_VENTA) AS AÑO
FROM tabla_de_productos P
INNER JOIN items_facturas I
ON P.CODIGO_DEL_PRODUCTO = I.CODIGO_DEL_PRODUCTO
INNER JOIN facturas F
ON F.NUMERO = I.NUMERO
WHERE YEAR(FECHA_VENTA)= 2016
GROUP BY year(F.FECHA_VENTA)
ORDER BY SUM(I.CANTIDAD) DESC;

/*VENTAS TOTALES POR SABOR EN EL AÑO 2016 Y EL PORCENTAJE DE PARTICIPACION EN LAS VENTAS TOTALES*/

SELECT 
VENTAS_SABOR.SABOR, 
VENTAS_SABOR.AÑO, 
VENTAS_SABOR.CANTIDAD_TOTAL, 
ROUND((VENTAS_SABOR.CANTIDAD_TOTAL / VENTAS_TOTAL.CANTIDAD_TOTAL)*100,2) AS PORCENTAJE  
FROM(
SELECT P.SABOR, SUM(I.CANTIDAD) AS CANTIDAD_TOTAL, year(F.FECHA_VENTA) AS AÑO
FROM tabla_de_productos P
INNER JOIN items_facturas I
ON P.CODIGO_DEL_PRODUCTO = I.CODIGO_DEL_PRODUCTO
INNER JOIN facturas F
ON F.NUMERO = I.NUMERO
WHERE YEAR(FECHA_VENTA)= 2016
GROUP BY P.SABOR,year(F.FECHA_VENTA))
VENTAS_SABOR
INNER JOIN (
SELECT SUM(I.CANTIDAD) AS CANTIDAD_TOTAL, year(F.FECHA_VENTA) AS AÑO
FROM tabla_de_productos P
INNER JOIN items_facturas I
ON P.CODIGO_DEL_PRODUCTO = I.CODIGO_DEL_PRODUCTO
INNER JOIN facturas F
ON F.NUMERO = I.NUMERO
WHERE YEAR(FECHA_VENTA)= 2016
GROUP BY year(F.FECHA_VENTA)) 
VENTAS_TOTAL
ON VENTAS_TOTAL.AÑO = VENTAS_SABOR.AÑO
ORDER BY VENTAS_SABOR.CANTIDAD_TOTAL DESC;
